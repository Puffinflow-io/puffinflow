name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  id-token: write

jobs:
  validate-tag:
    name: Validate Release Tag
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      is-prerelease: ${{ steps.check-prerelease.outputs.is-prerelease }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Get version from tag or input
        id: get-version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Version: ${VERSION}"
      
      - name: Check if prerelease
        id: check-prerelease
        run: |
          VERSION="${{ steps.get-version.outputs.version }}"
          if [[ "${VERSION}" =~ (alpha|beta|rc|dev) ]]; then
            echo "is-prerelease=true" >> $GITHUB_OUTPUT
            echo "This is a prerelease: ${VERSION}"
          else
            echo "is-prerelease=false" >> $GITHUB_OUTPUT
            echo "This is a stable release: ${VERSION}"
          fi

  test:
    name: Run Full Test Suite
    runs-on: ubuntu-latest
    needs: validate-tag
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,observability,integrations]"
      
      - name: Run linting
        run: |
          ruff check .
          ruff format --check .
          black --check .
          mypy src/
      
      - name: Run tests with coverage
        run: |
          pytest tests/unit/ --cov=src/puffinflow --cov-report=xml --cov-fail-under=85
      
      - name: Run integration tests
        run: |
          pytest tests/ -m "integration" --tb=short || echo "No integration tests found"

  build:
    name: Build Distribution
    runs-on: ubuntu-latest
    needs: [validate-tag, test]
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
      
      - name: Build package
        run: python -m build
      
      - name: Check package
        run: twine check dist/*
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ needs.validate-tag.outputs.version }}
          path: dist/
          retention-days: 90

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-tag, test, build]
    outputs:
      release-id: ${{ steps.create-release.outputs.id }}
      upload-url: ${{ steps.create-release.outputs.upload_url }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-${{ needs.validate-tag.outputs.version }}
          path: dist/
      
      - name: Generate changelog
        id: changelog
        run: |
          VERSION="${{ needs.validate-tag.outputs.version }}"
          
          # Get the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          echo "## Changes" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          
          if [[ -n "$PREV_TAG" ]]; then
            echo "### Commits since $PREV_TAG:" >> CHANGELOG.md
            git log --pretty=format:"- %s (%h)" $PREV_TAG..HEAD >> CHANGELOG.md
          else
            echo "### All commits:" >> CHANGELOG.md
            git log --pretty=format:"- %s (%h)" >> CHANGELOG.md
          fi
          
          echo "" >> CHANGELOG.md
          echo "## Installation" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo '```bash' >> CHANGELOG.md
          echo "pip install puffinflow==${{ needs.validate-tag.outputs.version }}" >> CHANGELOG.md
          echo '```' >> CHANGELOG.md
          
          # Set output for use in release
          {
            echo 'changelog<<EOF'
            cat CHANGELOG.md
            echo EOF
          } >> $GITHUB_OUTPUT
      
      - name: Create Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.validate-tag.outputs.version }}
          release_name: Release ${{ needs.validate-tag.outputs.version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: ${{ needs.validate-tag.outputs.is-prerelease == 'true' }}
      
      - name: Upload wheel to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: dist/*.whl
          asset_name: puffinflow-${{ needs.validate-tag.outputs.version }}-py3-none-any.whl
          asset_content_type: application/zip
      
      - name: Upload source distribution to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: dist/*.tar.gz
          asset_name: puffinflow-${{ needs.validate-tag.outputs.version }}.tar.gz
          asset_content_type: application/gzip

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [validate-tag, create-release]
    environment: 
      name: pypi
      url: https://pypi.org/p/puffinflow
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-${{ needs.validate-tag.outputs.version }}
          path: dist/
      
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          verbose: true
          print-hash: true

  publish-test-pypi:
    name: Publish to Test PyPI
    runs-on: ubuntu-latest
    needs: [validate-tag, build]
    if: needs.validate-tag.outputs.is-prerelease == 'true'
    environment:
      name: testpypi
      url: https://test.pypi.org/p/puffinflow
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-${{ needs.validate-tag.outputs.version }}
          path: dist/
      
      - name: Publish to Test PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository-url: https://test.pypi.org/legacy/
          verbose: true
          print-hash: true

  notify:
    name: Post-Release Notifications
    runs-on: ubuntu-latest
    needs: [validate-tag, create-release, publish-pypi]
    if: always()
    
    steps:
      - name: Notify on success
        if: needs.publish-pypi.result == 'success'
        run: |
          echo "‚úÖ Successfully released puffinflow ${{ needs.validate-tag.outputs.version }}"
          echo "üì¶ Available on PyPI: https://pypi.org/project/puffinflow/${{ needs.validate-tag.outputs.version }}/"
          echo "üìã Release notes: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ needs.validate-tag.outputs.version }}"
      
      - name: Notify on failure
        if: failure()
        run: |
          echo "‚ùå Release failed for puffinflow ${{ needs.validate-tag.outputs.version }}"
          echo "Please check the workflow logs and try again."